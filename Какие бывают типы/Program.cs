/*
 В этом уроке мы рассмотрим систему типов в C# с высоты птичьего полета, не погружаясь в детали. 
 Но сначала ответим на вопрос, зачем вообще про них знать? 
 В коде программ мы все время оперируем данными. 
 Эти данные имеют разную природу, могут быть по разному организованы,
 что влияет и на удобство работы с ними и эффективность этой работы. 
 Типы преследуют нас буквально на каждом шагу, 
 поэтому без их изучения программирование на C# возможно только на очень базовом уровне.

С другой стороны не пытайтесь запомнить всю эту информацию про типы наизусть (иначе можно приуныть). 
Она дается лишь для общего представления. 
Все что надо знать про типы вы и так выучите в процессе программирования.

Глобально, типы данных в C# можно разделить на две большие группы: 
встроенные и пользовательские.

Встроенные типы данных – типы которые определены в самом языке. 
Некоторыми встроенными типами мы уже пользовались: int, float и string. 

Пользовательские создаются программистами и позволяют расширить количество типов в языке. 
Мы с вами позже научимся их создавать самим.

Всего в языке 18 встроенных типов данных. 
Полный список вы сможете найти в документации к языку. 
Тут же мы проведем краткий обзор.

10 из 18 типов используются для представления целых чисел. 
Это типы byte, sbyte, short, ushort, int, uint, nint, nuint, long, ulong. 
Отличаются они прежде всего количеством занимаемой памяти и, как следствие, 
диапазоном возможных значений. Например byte занимает в памяти, 
как ни трудно догадаться, один байт, а значит может хранить числа от 0 до 255 
(здесь мы не погружаемся в основы двоичной системы счисления, просто поверьте на слово). 
short и ushort – 2 байта, 
int и uint – 4 байта и long и ulong – 8 байт. 
nint и nuint могут иметь как 4 так и 8 байт в зависимости от разрядности системы. 
Приставка u означает что это беззнаковый (unsigned) тип 
– он может хранить только целые числа без знака.
byte x = 3; // Отработает без проблем

// error CS0031: Constant value '270' cannot be converted to a 'byte'
byte y = 270;
Определение переменной y завершилось с ошибкой, потому что мы указали тип byte, 
но присвоили переменной значение 270, которое выходит за множество возможных значений.

Возникает закономерный вопрос. 
Зачем аж 10 типов для хранения чисел? 
Почему бы не сделать один, в который влезает почти любое большое число? 
Технически так сделать можно, но мы находимся в мире инженерных решений. 
Это значит, что у любого решения всегда есть обратная сторона, поэтому невозможно сделать идеально, 
придется чем-то пожертвовать. В данном случае, объемом занимаемой памяти. 
Если оставить только long, то программа активно оперирующая числами начнет 
занимать слишком много места в оперативной памяти, что может быть критично.

Такая же логика использовалась для типов float и double. Они оба отвечают за рациональные числа, 
разница лишь в том, что double это "двойной" float, то есть в памяти он занимает в два раза больше места.

Создатели C# полагаются на разумность программистов. 
На их способность правильно подобрать нужные типы в зависимости от задачи. 
Для каких-то экстремальных приложений так и происходит, но в типичной разработке все просто. 
Программисты выбирают int для целых чисел и double для рациональных.

Тип boolean отвечает за логические значения true и false. 
Впереди им посвящен целый раздел, там мы про него и поговорим.

Все числовые типы являются значимыми. 
Это значит что передаче они копируются целиком, и что в них нельзя записать значение null. 
В следующем уроке мы поговорим про это.

Строка сама по себе тоже является базовым типом. 
В отличие от предыдущих базовых типов, строка является ссылочным типом. 
Это означает что при передаче она передает лишь ссылку на себя, а не копируется целиком.

Особняком стоит тип char (символ). 
Символ это не строка, у него другой способ определения, через одиночные кавычки:

char ch = 'a';
// error CS0029: Cannot implicitly convert type 'string' to 'char'
char ch2 = "b";

Строка состоящая из одного символа это не символ. 
С точки зрения здравого смысла кажется не логично, но, с точки зрения, типов все так и должно быть, 
со временем вы это прочувствуете.

Извлечение символа из строки извлекает как раз символ, 
а не строку состоящую из одного символа.

// операция [] извлекает из строки символ с нужным номером. 
Нумерация начинается с 0
"hexlet"[1]; // 'e'

object – это базовый тип для всех остальных типов. 
Дальше в уроках про объектно-ориентированное программирование мы разберем что это значит.

dynamic – это очень особенный тип в языке C#. 
Он даже является скорее "анти-типом", 
так как позволяет писать в себя любые данные без проверки компилятором. 
Изучение dynamic выходит за рамки этого курса, 
но и в реальном коде его использование можно увидеть не часто. 
Если интересно, можете почитать статью.

Задание
Выведите на экран результат конкатенации слова hexlet, символа - и числа 7

*/ 

string slovo = "hexlet";
char simvol = '-' ; // <=Символ это не строка, 
                    // у него другой способ определения, через одиночные кавычки:
int chislo = 7;
Console.WriteLine(slovo + simvol + chislo);
Console.WriteLine($"{"hexlet"}{"-"}{7}"); // это интерполяция
Console.WriteLine("hexlet" + "-" + 7); // это конкаиенация







