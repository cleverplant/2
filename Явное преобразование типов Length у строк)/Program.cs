/* 
В программировании регулярно встречаются задачи, 
когда один тип данных нужно преобразовать в другой. 
Простейший пример – работа с формами на сайтах. 
Данные формы всегда приходят в текстовом виде, даже если значение число.
Вот как его можно преобразовать:   
*/
// станет int
var number = Convert.ToInt32("345");
Console.WriteLine(number); // => 345
/*
Если нужно конвертировать из примитивного типа в примитивный, то все проще. 
Достаточно перед значением в скобках указать желаемый тип. 
В результате значение справа преобразуется в значение другого типа, 
указанного слева:
(int) 5.1; // 5

Преобразование типов можно использовать внутри составных выражений:
// 
Дополнительные скобки помогают визуально 
отделить части выражения друг от друга:
Console.WriteLine(10 + ((int) 5.1)); // => 15

Задание
Выведите на экран строку 2 times, полученную из числа 2.9 и строки times, 
используя преобразования типов и конкатенацию.
*/

Console.WriteLine(((int) 2.9) + " times"); // => 2 times
Console.WriteLine((int) 2.9 + " times");// => (int) 2.9 - скобки нужны обязательно
/* 
Сложение, конкатенация, нахождение остатка от деления 
и остальные ранее рассмотренные операции – все это довольно базовые 
возможности языков программирования. 
Математика не ограничена арифметикой, кроме нее есть и множество других разделов 
со своими операциями, например, геометрия. 

То же самое касается и строк: их можно переворачивать, менять регистр букв, 
удалять лишние символы — и это только самое простое. 

И, наконец, на более высоком уровне есть прикладная логика конкретного приложения. 
Программы списывают деньги, считают налоги, формируют отчеты. 
Количество подобных операций бесконечно и индивидуально для каждой программы. 
И все они должны быть как-то выражены в коде.

Для выражения любой произвольной операции в программировании существует понятие функция. 
Функции бывают как встроенные в язык, так и добавленные программистом. 
С одной встроенной функцией мы уже знакомы, это WriteLine().

Функции — одна из ключевых конструкций в программировании, 
без них невозможно сделать практически ничего. 
Знакомство с ними мы начинаем как можно раньше, 
так как весь дальнейший материал оперирует функциями по максимуму. 

Сначала мы научимся пользоваться уже созданными функциями, 
а уже потом научимся создавать свои собственные.

Здесь нужно сделать небольшую оговорку. 
В C# невозможно создать обычную функцию, 
как это позволяет делать большинство других языков. 

Все функции C# создаются только внутри классов, которые мы пока не разбирали. 
А функции, которые определены внутри классов принято называть методами. 
Поэтому в дальнейшем мы будем придерживаться этой терминологии.

Начнем с простых методов для работы над строками. 
Ниже пример вызова метода ToUpper(), который переводит все слово в верхний регистр:  */

Console.WriteLine("hexlet".ToUpper());// HEXLET
Console.WriteLine("HEXLET".ToLower());// hexlet
/*  
Методы это действия, которые нужно выполнить над данными, к которым они применяются. 
В программировании данные у которых есть методы называют объектами. 
В реальности все чуть сложнее, но пока нам достаточно и такого определения.

Рассмотрим еще несколько примеров с добавлением переменных:
 */
var company = "Hexlet";

var upperCompany = company.ToUpper();
Console.WriteLine(upperCompany); // => "HEXLET"

var lowerCompany = company.ToLower();
Console.WriteLine(lowerCompany); // => "hexlet"
/* 
Самое основное в работе с методами – понять принцип возврата значения. 
Методы почти никогда не выводят данные на экран, они их возвращают. 
Благодаря этому мы можем разбить нашу программу на кусочки из которых 
потом составляется что-то сложное. 
В примерах выше результат вызова каждого метода записывается в переменные. 
Но это не обязательно, мы можем использовать методы напрямую: 
*/
var com = "Hexlet";
Console.WriteLine(com.ToUpper()); // => HEXLET
/*  
Постепенно мы начнем знакомиться со все большим количеством встроенных методов в язык. 
Этих методов много, настолько много, что их невозможно запомнить. 
Хорошая новость в том, что это и не требуется. 
Никто не помнит названий методов наизусть. 
Главное примерно представлять себе что требуется, 
а дальше в руки подсказки редактора, документация и гугл.
 Магии не существует, 
 программисты постоянно сидят в документации разбираясь с тем как что работает.

 ========    Свойство Length у строк ======================

Помимо обычных методов, в C# есть еще особенный тип – свойства. 
Это тоже методы, но они вызываются без скобочек. 
Подробнее о них будет рассказано в следующих уроках. 
Сейчас нам нужно запомнить только одно свойство у строк, 
которое мы будем использовать в следующих уроках.*/
var companyLength = "Hexlet".Length;
Console.WriteLine(companyLength); // => 6
/*
Свойство Length у строки возвращает ее длину. 
Пока просто запомните как она вызывается. 
Потом мы изучим их подробнее и даже научимся создавать самим.

Задание
В коде определена переменная с именем. 
Используя методы ToUpper() и ToLower() у этой переменной определите две новые переменные, 
чтобы на экран вывелась фраза:

HODOR says: "hodor"
*/
var name = "Hodor";

// BEGIN (write your solution here)
var who = name.ToUpper();
var what = name.ToLower();
// END

Console.WriteLine($"{who} says: \"{what}\"");




