/*
Независимо от того, какой язык программирования используется, 
методы внутри него обладают некоторыми фундаментальными свойствами. 
Зная эти свойства, легче прогнозировать поведение методов, 
способы их тестирования и место их использования. 

К таким свойствам относится детерминированность. 

Метод называется детерминированным тогда, 
когда для одних и тех же входных аргументов он возвращает один и тот же результат. 
Например, 
метод, находящий номер символа в строке, детерминированный

"wow".IndexOf('o'); // 1
"wow".IndexOf('o'); // 1

Сколько бы раз мы не вызывали этот метод, 
передавая туда символ 'o', 
он всегда вернет значение 1. 

В свою очередь метод, возвращающий случайное число или, например, 
текущее время, не является детерминированным, 
так как у одного и того же входа 
(даже если он пустой, то есть аргументы не принимаются) 
мы получим всегда разный результат. 

Насколько он разный - не важно, 
даже если хотя бы один из миллиона вызовов вернет что-то другое, 
этот метод автоматически считается недетерминированным.

// Метод, возвращающий случайное рациональное число
*/

//Functions.RandomDouble(); // 0.9421500302020687
                          // 0.5468204760759785
/*
Зачем это нужно знать? 
Детерминированность серьезно влияет на многие аспекты. 
Детерминированные функции удобны в работе, 
их легко оптимизировать, легко тестировать. 

Если есть возможность сделать функцию детерминированной, 
то лучше ее такой и сделать

Задание
Метод Functions.RandomDouble() 
возвращает случайное число от 0 до 1 с большим количеством знаков после запятой. 
Но в реальных задачах бывает нужно получать случайные целые числа, 
например, в диапазоне от 0 до 10. 
Реализуйте код, который возвращает именно такие числа. 
Для этого вам понадобится одно умножение и преобразование типов. 
Functions.RandomDouble() возвращает double, а нам нужен int.

// Преобразование в int
(int) 0.932342; // 0
(int) 8.123412; // 8
Попробуйте решить это задание в одну строчку
*/
/*   ---- это решение учителя ----
Console.WriteLine((int) (Functions.RandomDouble() * 10)); 
--------- не проходит в VScode ---
*/ 
// нужно искать решение, хотя бы примерно:

Random rndu = new Random();
var output = rndu.Next(0, 10);
var outputAsNumber = Convert.ToInt32(output);
Console.WriteLine(outputAsNumber);
/* 
Ура! Всё получилось! 
Сравните своё решение с решением учителя и переходите к следующему уроку
*/

